#requires -version 3.0

#region IncludePrivate

#endregion IncludePrivate

#region Functions

function Expand-WinEvent {
    <#
    .SYNOPSIS
    Configured EventLogRecords into EventLogExpandedRecords that are easier to parse
    .DESCRIPTION
    Convert eventRecords into a more parseable object format, including custom event properties
    By expanding the Event XML data into individual properties, this makes WinEvents easier to work with and parse
     
    .NOTES
    Inspired by http://blogs.technet.com/b/ashleymcglone/archive/2013/08/28/powershell-get-winevent-xml-madness-getting-details-from-event-logs.aspx
    .EXAMPLE
    PS C:\> Get-Winevent -LogName Application | Expand-WinEvent
    Takes all application logs and expands their properties.
    #>

    param (
        #Specifies an event generated by Get-WinEvent. WARNING: DOES NOT WORK WITH GET-EVENTLOG
        [Parameter(Mandatory,ValueFromPipeline)]
        [System.Diagnostics.Eventing.Reader.EventLogRecord]$EventLogRecord,
        #If specified, outputs a hashtable of object properties rather than the object itself. Useful for creating a subtype.
        [Switch]$OutHashTable
    )

    begin {
        #Define the event type and default display properties
        $CustomEventRecordType = "System.Diagnostics.Eventing.Reader.EventLogRecordExpanded"
        Update-TypeData -TypeName $CustomEventRecordType -DefaultDisplayPropertySet TimeCreated,ID,ProviderName,TaskDisplayName -Force
    } #Begin

    process {
        $EventLogRecord | foreach {

            $EventProperties = [ordered]@{
                TimeCreated = $PSItem.TimeCreated
                ID = $PSItem.ID
                LevelDisplayName = $PSItem.LevelDisplayName
                ProviderName = $PSItem.ProviderName
                TaskDisplayName = if ($PSItem.TaskDisplayName) {$PSItem.TaskDisplayName} else {$null}
                MachineName = $PSItem.MachineName
                Message = $PSItem.Message
                RawEvent = $PSItem
            }


            #Add all the attribute properties of the event object. This is dynamic and works for all events.
            $i = 1
            ([xml]$PSItem.toxml()).Event.EventData.Data |  foreach {
                #Skip in the event this is a classic log with no attribute properties
                if ($PSItem) {

                    #If the data is unstructured, just create as "Property1","Property2", etc.
                    if ($PSItem -isnot [System.XML.XMLElement]){
                        $PropertyName = "Property" + $i
                        $EventProperties.Add($PropertyName,$PSItem)
                        $i++
                    } 
                    
                    else {
                        if ($EventProperties.Contains($PSItem.Name)) {
                            $PropertyName = "property" + $PSItem.Name
                        } else { $PropertyName = $PSItem.Name }
                        $EventProperties.Add($PropertyName,$PSItem."#text")
                    }
                } #If ($PSItem)
            } #ForEach
            
            if ($OutHashTable) {
                $EventProperties
            } 
            else {
                $result = [PSCustomObject]$EventProperties
                #Assign custom type so it shows properly in Get-Member
                $result.PSTypeNames.Insert(0,$customEventRecordType)
                $result
            }
        } #ForEach
    } #Process
} #Expand-WinEvent

function Format-ADChangeWinEvent {
    <#
       .SYNOPSIS
       Configured EventLogRecords into easier to parse entries 
    #>
    param(
        #Specifies an event generated by Get-WinEvent. WARNING: DOES NOT WORK WITH GET-EVENTLOG
        [Parameter(Mandatory,ValueFromPipeline)]
        [System.Diagnostics.Eventing.Reader.EventLogRecord]$EventLogRecord
    )

    begin {
        #Define the base event record type
        $defaultCustomEventRecordType = "System.Diagnostics.Eventing.Reader.EventLogRecordExpanded"
        Update-TypeData -TypeName $defaultCustomEventRecordType -DefaultDisplayPropertySet TimeCreated,ID,ProviderName,TaskDisplayName -Force
    }
    
    process {
        $EventLogRecord | Expand-WinEvent -OutHashTable | foreach {
            $EventProperties = $PSItem
            
            #Add additional properties based on the Event type
            switch ($PSItem.ID) {
                5136 { #Directory Object Modified
                    $customEventRecordType = $defaultCustomEventRecordType + ".DSObjectModified"
                    #Make the output easier to read without affecting structure
                    Update-TypeData -TypeName $customEventRecordType -DefaultDisplayPropertySet TimeCreated,MachineName,ID,TaskDisplayName,Requestor,Action,Target,AttributeLDAPDisplayName,AttributeValue,Location -Force

                    $EventProperties.Requestor = $EventProperties.SubjectDomainName + "\" + $EventProperties.SubjectUserName
                    $EventProperties.Target = $EventProperties.objectdn -replace "(\w\w\=)(.*?),(.*)",'$2'
                    $EventProperties.Location = $EventProperties.objectdn -replace "(\w\w\=)(.*?),(.*)",'$3'

                    #Do some text replacement for the Operation
                    #TODO: This should use a .NET function rather than script-hardcoded values. No idea what the function would be though.
                    $EventAction = switch ($EventProperties.OperationType) {
                        '%%14674' {"DSAttributeAdd"}
                        '%%14675' {"DSAttributeDelete"}
                        default {$EventAction = $null}
                    }
                    $EventProperties.Action = $EventAction
                }

                5137 { #Directory Object Created
                    $customEventRecordType = $defaultCustomEventRecordType + ".DSObjectCreate"
                    
                    #Make the output easier to read without affecting structure
                    Update-TypeData -TypeName $customEventRecordType -DefaultDisplayPropertySet TimeCreated,MachineName,ID,TaskDisplayName,Requestor,Action,Target,AttributeLDAPDisplayName,AttributeValue,Location -Force

                    $EventProperties.Requestor = $EventProperties.SubjectDomainName + "\" + $EventProperties.SubjectUserName
                    $EventProperties.Target = $EventProperties.objectdn -replace "(\w\w\=)(.*?),(.*)",'$2'
                    $EventProperties.Location = $EventProperties.objectdn -replace "(\w\w\=)(.*?),(.*)",'$3'
                    $EventProperties.Action = "DSObjectCreate"
                }

                5139 { #Directory Object Moved
                    $customEventRecordType = $defaultCustomEventRecordType + ".DSObjectMove"
                    
                    #Make the output easier to read without affecting structure
                    Update-TypeData -TypeName $customEventRecordType -DefaultDisplayPropertySet TimeCreated,MachineName,ID,TaskDisplayName,Requestor,Action,OldObjectDN,NewObjectDN -Force

                    $EventProperties.Requestor = $EventProperties.SubjectDomainName + "\" + $EventProperties.SubjectUserName
                    $EventProperties.Target = $EventProperties.objectdn -replace "(\w\w\=)(.*?),(.*)",'$2'
                    $EventProperties.Location = $EventProperties.objectdn -replace "(\w\w\=)(.*?),(.*)",'$3'
                    $EventProperties.Action = "DSObjectCreate"
                }

                5141 { #Directory Object Deleted
                    $customEventRecordType = $defaultCustomEventRecordType + ".DSObjectDelete"
                    
                    #Make the output easier to read without affecting structure
                    Update-TypeData -TypeName $customEventRecordType -DefaultDisplayPropertySet TimeCreated,MachineName,ID,TaskDisplayName,Requestor,Action,Target,AttributeLDAPDisplayName,AttributeValue,Location -Force

                    $EventProperties.Requestor = $EventProperties.SubjectDomainName + "\" + $EventProperties.SubjectUserName
                    $EventProperties.Target = $EventProperties.objectdn -replace "(\w\w\=)(.*?),(.*)",'$2'
                    $EventProperties.Location = $EventProperties.objectdn -replace "(\w\w\=)(.*?),(.*)",'$3'
                    $EventProperties.Action = "DSObjectDelete"
                }

                default { $customEventRecordType = $defaultCustomEventRecordType }
                
            } #Switch


            $result = [PSCustomObject]$EventProperties
            $result.PSTypeNames.Insert(0,$customEventRecordType)
            $result
        } #Foreach
    } #Process

} #Format-ADChangeEvent
#endregion Functions


#region Main
    $filterHashTable = @{
        StartTime = (Get-Date).addhours(-2)
        EndTime = (Get-Date)
        ID = 5136,5137,5139,5141
        LogName = "Microsoft-Windows-DirectoryServices-Deployment/Operational"
    }
    Get-WinEvent -ComputerName adslprobe02 -filterhashtable $filterHashTable -maxevents 30 | Format-ADChangeWinEvent | ft requestor,target
#endregion Main